# -----------------------------------------------------------------------
# [y] hybris Platform
#
# Copyright (c) 2017 SAP SE or an SAP affiliate company.  All rights reserved.
#
# This software is the confidential and proprietary information of SAP
# ("Confidential Information"). You shall not disclose such Confidential
# Information and shall use it only in accordance with the terms of the
# license agreement you entered into with SAP.
# -----------------------------------------------------------------------
# you can put key/value pairs here.
# Use Config.getParameter(..) to retrieve the values during runtime.

# javamelody.key=value

# Specifies the location of the spring context file putted automatically to the global platform application context.
javamelody.application-context=javamelody-spring.xml


#Paramètre pour désactiver les graphiques jdbc, le compteur sql et le monitoring de base de
#données ("false" par défaut).
monitoring.javamelody.no-database=

#active le monitoring (false par défaut).
monitoring.javamelody.enabled=false

#Résolution des courbes en secondes (60 par défaut).
#Une résolution entre 60 et 600 est recommandée (c'est-à-dire 1 à 10 minutes).
monitoring.javamelody.resolution-seconds=

#Nombre de jours avant qu'un fichier de graphique JRobin (extension .rrd) qui n'est plus utilisé,
#soit considéré comme obsolète et soit supprimé automatiquement, à minuit (90 par défaut, soit 3 mois).
monitoring.javamelody.obsolete-graphs-days=

#Nombre de jours avant qu'un fichier de statistiques (extension .ser.gz),
#soit considéré comme obsolète et soit supprimé automatiquement, à minuit (365 par défaut, soit 1 an).
monitoring.javamelody.obsolete-stats-days=

#Période en secondes du sampling pour trouver les hotspots (null par défaut : pas de sampling).
#Une valeur de 10 est recommandée (c'est-à-dire 10 secondes) pour ne pas entraîner d'overhead,
#ce qui nécessitera plusieurs heures pour avoir des résultats significatifs.
#Cette période peut-être une valeur décimale comme 0.1 pour avoir des résultats plus rapidement,
#mais avec un plus grand overhead.
monitoring.javamelody.sampling-seconds=

#Nom du répertoire de stockage (monitoring par défaut).
#Si le nom du répertoire commence par '/', on considère que c'est un chemin absolu,
#sinon on considère que c'est un chemin relatif par rapport au répertoire temporaire
#('temp' dans TOMCAT_HOME pour tomcat).
monitoring.javamelody.storage-directory=

#Active le log des requêtes http au niveau INFO (false par défaut).
monitoring.javamelody.log=

#Seuil en millisecondes pour décompte en niveau warning (moyenne globale + 1 écart-type par défaut).
monitoring.javamelody.warning-threshold-millis=

#Seuil en millisecondes pour décompte en niveau severe (moyenne globale + 2 * écart-type par défaut).
monitoring.javamelody.severe-threshold-millis=

#Expression régulière pour exclure certaines urls du monitoring (null par défaut).
#Voir {@link java.util.regex.Pattern http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html}
monitoring.javamelody.url-exclude-pattern=/_ui/.*

#Expression régulière (null par défaut) pour transformer la description de la requête http
#et pour supprimer des parties variables (identifiant d'objet par exemple)
#afin de permettre l'agrégation sur ces requêtes.
monitoring.javamelody.http-transform-pattern=

#Expression régulière (null par défaut) pour transformer la description de la requête sql
#(identifiants non bindés dans une clause in par exemple)
#afin de permettre l'agrégation sur ces requêtes.
monitoring.javamelody.sql-transform-pattern=

#Expression régulière (null par défaut) pour transformer la description d'une méthode spring.
monitoring.javamelody.spring-transform-pattern=

#Expression régulière (null par défaut) pour transformer la description d'une action Struts 2.
monitoring.javamelody.struts-transform-pattern=

#Expression régulière (null par défaut) pour transformer la description d'une erreur http.
monitoring.javamelody.error-transform-pattern=

#Expression régulière (null par défaut) pour transformer la description d'un log.
monitoring.javamelody.log-transform-pattern=

#Expression régulière (null par défaut) pour transformer le nom d'un job.
monitoring.javamelody.job-transform-pattern=

#Expression régulière (null par défaut) pour transformer le nom d'une page jsp.
monitoring.javamelody.jsp-transform-pattern=

#Compteurs affichés: mettre "http,sql,error,log,ejb" pour afficher les ejb3
#ou "http,sql,error,log,spring" pour afficher les beans spring ("http,sql,error,log" par défaut).
monitoring.javamelody.displayed-counters=

#Liste des noms de rapports personnalisés (null par défaut).<br/>
monitoring.javamelody.custom-reports=

#Liste de packages exclus du sampling
#("java,sun,com.sun,javax,org.apache,org.hibernate,oracle,org.postgresql,org.eclipse" par défaut).
monitoring.javamelody.sampling-excluded-packages=

#List of packages to include for sampling, can be used if sampling-excluded-packages is null
#(null by default).
monitoring.javamelody.sampling-included-packages=


#Paramètre pour désactiver la compression des flux http ("false" par défaut).
monitoring.javamelody.gzip-compression-disabled=

#Active les actions systèmes telles que Ramasse-miettes, Invalidation sessions et Heap-dump (true par défaut).
monitoring.javamelody.system-actions-enabled=

#Active la protection contre CSRF (false par défaut).
monitoring.javamelody.csrf-protection-enabled=

#Expression régulière (null par défaut) pour restreindre l'accès au monitoring à certaines adresses IP.
monitoring.javamelody.allowed-addr-pattern=

#List of authorized users for BASIC auth, when you do no want to use a realm and "security-constraint" in web.xml.<br/>
#Format : user:password, one by line or separated by comma <br/>
#<pre>
#user1:pwd1, user2:pwd2
#user3:pwd3
#</pre>
monitoring.javamelody.authorized-users=

#Désactive l'update-check (false par défaut).
monitoring.javamelody.update-check-disabled=

#Liste des datasources jdbc quand elles ne peuvent trouvées automatiquement dans JNDI (null par défaut).
monitoring.javamelody.datasources=

#Si Tomcat et si JNDI est utilisé pour les datasources, active le rewraping des
#datasources au lieu de faire du rebinding dans JNDI (false par défaut).
#Cela permet de monitorer les requêtes SQL dans le cas où les datasources sont récupérées une
#fois pour toute et que l'initialisation de JavaMelody ne peux être faite avant (hibernate par exemple).
#Cela est utilisé notamment dans le plugin Atlassian pour JIRA.
monitoring.javamelody.rewrap-datasources=

#Nom JNDI de la session mail pour l'envoi par mail de rapport de hebdomadaire (null par défaut).
monitoring.javamelody.mail-session=

#Liste des adresses mails séparées par des virgules des destinataires
#pour l'envoi par mail de rapport de hebdomadaire (null par défaut).
monitoring.javamelody.admin-emails=

#Liste des périodes d'envoi des mails séparées par des virgules
#pour l'envoi par mail de rapport de hebdomadaire.
#Les périodes doivent être "day", "week" ou "month" ("week" par défaut).
monitoring.javamelody.mail-periods=

#Format du transport entre un serveur de collecte et une application monitorée
#(serialized : sérialisation java par défaut et recommandée pour les performances, xml : possible).
monitoring.javamelody.transport-format=

#To fix the locale of the reports (default to null, ie locale is given by the language of the browser).<br/>
#Example values: "en_US", "en", "fr_FR", "de_DE" or "pt_BR"
monitoring.javamelody.locale=

#URL du rapport de monitoring (/monitoring par défaut).
monitoring.javamelody.monitoring-path=/monitoring

#Identifiant de suivi google analytics s'il y a lieu (désactivé par défaut).
monitoring.javamelody.analytics-id=

#Expérimental, ne pas utiliser.
monitoring.javamelody.context-factory-enabled=

#true | false, true will return localhost/127.0.0.1 for hostname/hostaddress, false will attempt dns lookup for hostname (default: false).
monitoring.javamelody.dns-lookups-disabled=

#true | false, true will disable opening stack-traces of jdbc connections (default: false).
monitoring.javamelody.connections-stack-traces-disabled=

#Name of a class to use for JavaMelody logs (default: null for detection of Logback, Log4J or java.util.logging). <br/>
#The class must implement the interface {@link net.bull.javamelody.JavaMelodyLogger},
#such as net.bull.javamelody.internal.common.Log4JLogger, net.bull.javamelody.internal.common.Log4J2Logger,
#net.bull.javamelody.internal.common.JavaLogger or net.bull.javamelody.internal.common.LogbackLogger.
monitoring.javamelody.logger-class=net.bull.javamelody.internal.common.Log4JLogger

#Expose counters as JMX mbeans. Disabled by default.
monitoring.javamelody.jmx-expose-enabled=false

#Explicit name of the monitored application (in case the automatic name detection fails somehow).
monitoring.javamelody.application-name=

#Explicit version of the monitored application (to override the version from Maven files for example).
monitoring.javamelody.application-version=

#Comma separated list of Maven repositories URLs (https://repo1.maven.org/maven2/ by default).
monitoring.javamelody.maven-repositories=

#If Real User Monitoring enabled by injecting Boomerang javascript into html page ("false" by default).
monitoring.javamelody.rum-enabled=

#Address of the <a href='http://graphiteapp.org/'>Graphite</a> server to send metrics to,
#for example: 11.22.33.44:2003 (null by default).
monitoring.javamelody.graphite-address=

#Namespace to use in <a href='https://aws.amazon.com/cloudwatch/'>AWS CloudWatch</a> to send metrics,
#for example "MyCompany/MyAppDomain" (null by default).
monitoring.javamelody.cloudwatch-namespace=

#URL of the <a href='https://www.influxdata.com/time-series-platform/'>InfluxDB</a> server to send metrics to,
#for example: http://11.22.33.44:8086/write?db=mydb (null by default).
monitoring.javamelody.influxdb-url=

#API key of the <a href='https://www.datadoghq.com/'>Datadog</a> to send metrics,
#for example: 9775a026f1ca7d1c6c5af9d94d9595a4 (null by default).
monitoring.javamelody.datadog-api-key=